type token =
  | EQ
  | TRUE
  | FALSE
  | FIELD
  | LAND
  | LOR
  | LNOT
  | LPAREN
  | RPAREN
  | EOF
  | IDENT of (string)

open Parsing;;
let _ = parse_error;;
# 3 "db_filter_parse.mly"
 open Db_filter_types;;
# 19 "db_filter_parse.ml"
let yytransl_const = [|
  257 (* EQ *);
  258 (* TRUE *);
  259 (* FALSE *);
  260 (* FIELD *);
  261 (* LAND *);
  262 (* LOR *);
  263 (* LNOT *);
  264 (* LPAREN *);
  265 (* RPAREN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  266 (* IDENT *);
    0|]

let yylhs = "\255\255\
\003\000\003\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\001\000\000\000"

let yylen = "\002\000\
\001\000\002\000\003\000\003\000\003\000\002\000\001\000\001\000\
\003\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\007\000\008\000\000\000\000\000\000\000\001\000\
\011\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\010\000\000\000\009\000\004\000\005\000\003\000"

let yydgoto = "\002\000\
\009\000\010\000\011\000"

let yysindex = "\004\000\
\007\255\000\000\000\000\000\000\006\255\007\255\007\255\000\000\
\000\000\002\000\019\255\000\000\002\255\013\255\007\255\007\255\
\000\000\252\254\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\253\255\003\000"

let yytablesize = 266
let yytable = "\005\000\
\006\000\017\000\013\000\014\000\001\000\008\000\015\000\016\000\
\003\000\004\000\005\000\020\000\021\000\006\000\007\000\012\000\
\008\000\015\000\016\000\018\000\022\000\019\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\015\000\016\000\
\000\000\006\000"

let yycheck = "\004\001\
\000\000\000\000\006\000\007\000\001\000\010\001\005\001\006\001\
\002\001\003\001\004\001\015\000\016\000\007\001\008\001\010\001\
\010\001\005\001\006\001\001\001\018\000\009\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\005\001\006\001\
\255\255\009\001"

let yynames_const = "\
  EQ\000\
  TRUE\000\
  FALSE\000\
  FIELD\000\
  LAND\000\
  LOR\000\
  LNOT\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 30 "db_filter_parse.mly"
        ( Literal _1 )
# 163 "db_filter_parse.ml"
               : Db_filter_types._val))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 31 "db_filter_parse.mly"
              ( Field _2 )
# 170 "db_filter_parse.ml"
               : Db_filter_types._val))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Db_filter_types._val) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Db_filter_types._val) in
    Obj.repr(
# 34 "db_filter_parse.mly"
                 ( Eq(_1,_3) )
# 178 "db_filter_parse.ml"
               : Db_filter_types.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Db_filter_types.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Db_filter_types.expr) in
    Obj.repr(
# 35 "db_filter_parse.mly"
                 ( And(_1,_3) )
# 186 "db_filter_parse.ml"
               : Db_filter_types.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Db_filter_types.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Db_filter_types.expr) in
    Obj.repr(
# 36 "db_filter_parse.mly"
                ( Or(_1,_3) )
# 194 "db_filter_parse.ml"
               : Db_filter_types.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Db_filter_types.expr) in
    Obj.repr(
# 37 "db_filter_parse.mly"
            ( Not(_2) )
# 201 "db_filter_parse.ml"
               : Db_filter_types.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "db_filter_parse.mly"
       ( True )
# 207 "db_filter_parse.ml"
               : Db_filter_types.expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 39 "db_filter_parse.mly"
        ( False )
# 213 "db_filter_parse.ml"
               : Db_filter_types.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Db_filter_types.expr) in
    Obj.repr(
# 40 "db_filter_parse.mly"
                     ( _2 )
# 220 "db_filter_parse.ml"
               : Db_filter_types.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Db_filter_types.expr) in
    Obj.repr(
# 43 "db_filter_parse.mly"
           ( _1 )
# 227 "db_filter_parse.ml"
               : Db_filter_types.expr))
(* Entry exprstr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exprstr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Db_filter_types.expr)
